
type StakingPool @entity {
  id: ID!
  pool_id: String!
  total_share_balance: BigInt!,
  total_staked_balance: BigInt!,
  stakers: [Staker!] @derivedFrom(field: "select_staking_pool")
}

type Staker @entity {
  id: ID!
  staker_id: String!,
  select_staking_pool_id: String,
  select_staking_pool: StakingPool,
  shares: BigInt!,
  validator: Validator,

  bonding_consumer_chain_count: Int!
  bonding_consumer_chain_list_string: String!
  bonding_consumer_chains: [StakerAndConsumerChain!] @derivedFrom(field: "staker"),
  max_bonding_unlock_period: BigInt!,
  unbonding_unlock_time: BigInt!,
}

enum ValidatorStatus {
  Deployed,
  Staking,
  Unstaking,
  ToBeDestroyed
  Destroyed
}

type Validator @entity {
  id: ID!
  validator_id: String!
  escrow_id: String!
  total_staked_balance: BigInt!
  total_share_balance: BigInt!
  share_balance: BigInt!
  staked_balance: BigInt!
  staker: Staker
  status: ValidatorStatus!
  unstake_withdraw_certificate: Withdrawal

  delegator_count:Int!
  delegator_list_string: String!
  delegators: [Delegator!]! @derivedFrom(field: "select_validator")

  bonding_consumer_chain_count: Int!
  bonding_consumer_chains: [ValidatorAndConsumerChain!] @derivedFrom(field: "validator"),
  
  rewards: [ValidatorReward!] @derivedFrom(field: "validator")
  total_rewards: [ValidatorTotalReward!] @derivedFrom(field: "validator")

  increase_staking_amount: BigInt!
  decrease_staking_amount: BigInt!
  near_staking_reward_amount: BigInt!

}

type ValidatorReward @entity {
  id: ID!
  validator: Validator!
  reward_token_id: String!
  reward_token_amount: BigInt!
}

type ValidatorTotalReward @entity {
  id: ID!
  validator: Validator!
  reward_token_id: String!
  reward_token_amount: BigInt!
}

type Delegator @entity {
	id: ID!
  delegator_id: String!
  select_validator: Validator
  share_balance: BigInt!
  staked_balance: BigInt!
  rewards: [DelegatorReward!] @derivedFrom(field: "delegator")
  total_rewards: [DelegatorTotalReward!] @derivedFrom(field: "delegator")

  increase_staking_amount: BigInt!
  decrease_staking_amount: BigInt!
  near_staking_reward_amount: BigInt!
}

type DelegatorReward @entity {
  id: ID!
  delegator: Delegator
  reward_token_id: String!
  reward_token_amount: BigInt!
}

type DelegatorTotalReward @entity {
  id: ID!
  delegator: Delegator!
  reward_token_id: String!
  reward_token_amount: BigInt!
}

type ConsumerChain @entity {
  id: ID!
  consumer_chain_id: String!,
  unbonding_period: BigInt!,
  website: String!,
  governance: String!,
  treasury: String!,
  status: String!,
  pos_account_id: String!,
  register_fee: BigInt!,
  
  staker_count: Int!
  staker_list_string: String!
  stakers: [StakerAndConsumerChain!] @derivedFrom(field: "consumer_chain")
  validators: [ValidatorAndConsumerChain!] @derivedFrom(field: "consumer_chain")
}

type StakerAndConsumerChain @entity {
  id: ID!
  staker: Staker!
  consumer_chain: ConsumerChain!
  key: String!
}

type ValidatorAndConsumerChain @entity {
  id: ID!
  validator: Validator!
  consumer_chain: ConsumerChain!
  key: String!
}

enum SlashStatus {
  Pending,
  Rejected,
  Approved,
}

type Slash @entity {
  id: ID!
  consumer_chain_id: String!,
  slash_items: String!,
  evidence_sha256_hash: String!
  status: SlashStatus! 
}

type Summary @entity {
  id: ID!
  chain_count: Int!
  staker_count: Int!
  # only sum staking validator
  validator_count: Int!
  all_validator_count: Int!
  delegator_count: Int!
  total_staked_near: BigInt!
  staking_pool_list: String!
}

type Withdrawal @entity {
  id: ID!

  staker: Staker!
  
  withdrawal_certificate: String!
  pool_id: String!
  amount: BigInt!
  unlock_epoch: BigInt!
  unlock_time: BigInt!
  beneficiary: String!
  validator_id: String

  create_action: UserAction!
  withdraw_action: WithdrawAction

  is_withdrawn: Boolean! 
}

enum ActionType {

  # staking pool
  ping_action,

  # staker
  staker_stake_action,
  staker_increase_stake_action,
  staker_decrease_stake_action,
  staker_unstake_action,

  staker_bond_action,
  staker_unbond_action,
  staker_chang_key_action,

  # validator
  deploy_action,
  stake_action,
  increase_stake_action,
  decrease_stake_action,
  unstake_action,

  withdraw_unstake_action,
  destroy_action,
  validator_ping_action,

  validator_restake_action,
  validator_change_key_action,
  validator_unrestake_action,

  # cc gov
  register_consumer_chain_action,
  update_consumer_chain_action,
  deregister_consumer_chain_action,
  request_slash_action

  # delegator
  delegate_action,
  increase_delegation_action,
  decrease_delegation_action,
  undelegate_action,
  undelegate_in_unstake_action

  # validator & delegator
  withdraw_action,
  delegator_receive_reward_action,
  validator_receive_reward_action,

  delegator_claim_reward_action,
  validator_claim_reward_action,

  # reward
  octopus_receive_reward_action
  receive_anchor_reward_action,
  validator_receive_anchor_reward_action,

  #registry 
  register_consumer_chain_in_lpos_market_action,
  
}

type UserAction @entity {
  id: ID!

  predecessor_id: String!
	signer_id: String!
	user_id: String!
	timestamp: BigInt!
	timestamp_plus_log_index: BigInt!
	receipt_id: String!
  block_height: BigInt!

  action_type: ActionType!

   # staking pool
  ping_action: PingAction,
  
  #staker
  staker_stake_action: StakerStakeAction,
  staker_increase_stake_action: StakerIncreaseStakeAction,
  staker_decrease_stake_action: StakerDecreaseStakeAction,
  staker_unstake_action: StakerUnstakeAction,

  staker_bond_action: StakerBondAction,
  staker_unbond_action: StakerUnbondAction,
  staker_change_key_action: StakerChangeKeyAction,

  # cc gov
  register_consumer_chain_action: RegisterConsumerChainAction,
  update_consumer_chain_action: UpdateConsumerChainAction,
  deregister_consumer_chain_action: DeregisterConsumerChainAction,
  request_slash_action: RequestSlashAction,

  # validator
  deploy_action: DeployAction
  stake_action: StakeAction
  increase_stake_action: IncreaseStakeAction
  decrease_stake_action: DecreaseStakeAction
  unstake_action: UnstakeAction
  destroy_action: DestroyAction


  restake_action: RestakeAction
  unrestake_action: UnrestakeAction
  change_key_action: ChangeKeyAction

  validator_ping_action: ValidatorPingAction

  # delegator
  delegate_action: DelegateAction
  increase_delegation_action: IncreaseDelegationAction
  decrease_delegation_action: DecreaseDelegationAction
  undelegate_action: UndelegateAction
  undelegate_in_unstake_action: UndelegateInUnstakeAction

  # validator & delegator
  withdraw_action: WithdrawAction,
  withdraw_unstake_action: WithdrawUnstakeAction,

  delegator_receive_reward_action: DelegatorReceiveRewardAction,
  validator_receive_reward_action: ValidatorReceiveRewardAction,

  delegator_claim_reward_action: DelegatorClaimRewardAction,
  validator_claim_reward_action: ValidatorClaimRewardAction,

  # reward
  octopus_receive_reward_action: OctopusReceiveRewardAction, 
  receive_anchor_reward_action: ReceiveAnchorRewardAction ,
  validator_receive_anchor_reward_action: ValidatorReceiveAnchorRewardAction ,

  # registry
  register_consumer_chain_in_lpos_market_action: RegisterConsumerChainInLposMarketAction,
}

type PingAction @entity {
  id: ID!
  pool_id: String!
  balance: BigInt!
}

type StakerStakeAction @entity {
  id: ID!
  pool_id: String!
  amount: BigInt!
	shares: BigInt!,
	sequence: BigInt!
}

type StakerIncreaseStakeAction @entity {
  id: ID!
  amount: BigInt!
	shares: BigInt!,
	sequence: BigInt!
}

type StakerDecreaseStakeAction @entity {
  id: ID!
  amount: BigInt!,
	shares: BigInt!,
	withdrawal: Withdrawal!,
	sequence: BigInt!,
}

type StakerUnstakeAction @entity {
  id: ID!
  amount: BigInt!,
	shares: BigInt!,
	withdrawal: Withdrawal!,
	sequence: BigInt!
}

type StakerBondAction @entity {
  id: ID!
  staker_id: String!
  consumer_chain_id: String!
  key: String!
}

type StakerUnbondAction @entity {
  id: ID!
  staker_id: String!
  consumer_chain_id: String!
}

type StakerChangeKeyAction @entity {
  id: ID!
  staker_id: String!
  consumer_chain_id: String!
  old_key: String!
  new_key: String!
}

type ValidatorPingAction @entity {
  id: ID!
  validator_id: String!,
  balance: BigInt!
}

type RegisterConsumerChainAction @entity {
  id: ID!
  param: String!
}


type RegisterConsumerChainInLposMarketAction @entity {
  id: ID!
  consumer_chain_id: String!
  anchor_id: String!
}

type UpdateConsumerChainAction @entity {
  id: ID!
  param: String!
}

type DeregisterConsumerChainAction @entity {
  id: ID!

}

type RequestSlashAction @entity {
  id: ID!
  slash: Slash!
  consumer_chain_id: String!
  slash_items: String!
  evidence_sha256_hash: String!
}

type DeployAction @entity {
  id: ID!
  escrow_id: String!
  deploy_fee: BigInt!
}

type StakeAction @entity {
  id: ID!
  pool_id: String!
  amount: BigInt!
  shares: BigInt!
  validator_id: String!
}

type IncreaseStakeAction @entity {
  id: ID!
  amount: BigInt! 
  shares: BigInt!
  validator_id: String!
}

type DecreaseStakeAction @entity {
  id: ID!
  amount: BigInt!
  shares: BigInt!
  sequence: BigInt!
  staker_decrease_stake_action: StakerDecreaseStakeAction!
  withdrawal: Withdrawal!
  validator_id: String!
}

type UnstakeAction @entity {
  id: ID!
  withdrawal: Withdrawal!
  sequence: BigInt!
  staker_unstake_action: StakerUnstakeAction
  validator_id: String!
}

type DestroyAction @entity {
  id: ID!
  amount: BigInt!
  validator_id: String!
}

type RestakeAction @entity {
  id: ID!
  consumer_chain_id: String!
  key: String!
}

type UnrestakeAction @entity {
  id: ID!
  consumer_chain_id: String!
}

type ChangeKeyAction @entity {
  id: ID!
  consumer_chain_id: String!
  key: String!
}

type DelegateAction @entity {
  id: ID!
  amount: BigInt!
  shares: BigInt!
  validator_id: String!
}

type IncreaseDelegationAction @entity {
  id: ID!
  amount: BigInt!
  shares: BigInt!
  validator_id: String!
}

type DecreaseDelegationAction @entity {
  id: ID!
  amount: BigInt!
  shares: BigInt!
  sequence: BigInt!
  validator_id: String!
  staker_decrease_stake_action: StakerDecreaseStakeAction!
  withdrawal: Withdrawal!
}

type UndelegateAction @entity {
  id: ID!
  amount: BigInt!
  shares: BigInt!
  sequence: BigInt!
  validator_id: String!
  staker_decrease_stake_action: StakerDecreaseStakeAction!
  withdrawal: Withdrawal!
}

type UndelegateInUnstakeAction @entity {
  id: ID!
  amount: BigInt!
  shares: BigInt!
  validator_id: String!
}

type WithdrawAction @entity{
  id: ID!
  withdrawal_certificate: String!
  amount: BigInt!
  withdrawal: Withdrawal!
  beneficiary: String!
}

type WithdrawUnstakeAction @entity {
  id: ID!
  withdrawal_certificate: String!
  amount: BigInt!
  withdrawal: Withdrawal!
  validator_id: String!
}

type DelegatorReceiveRewardAction @entity {
  id: ID!
  token_id: String!
  amount: BigInt!
  receiver: String!
  validator_id: String
  share_balance: BigInt
  total_share_balance: BigInt
  reward_uuid: BigInt
  validator_commission_rate: BigInt

  timestamp: BigInt!
  user_action: UserAction!
}

type ValidatorReceiveRewardAction @entity {
  id: ID!
  token_id: String!
  amount: BigInt!
  receiver: String!
  reward_source: String
  share_balance: BigInt
  total_share_balance: BigInt
  reward_uuid: BigInt
  validator_commission_rate: BigInt

  timestamp: BigInt!
  user_action: UserAction!
}

type OctopusReceiveRewardAction @entity {
  id: ID!
  token_id: String!
  amount: BigInt!
  reward_uuid: BigInt

  timestamp: BigInt!
  user_action: UserAction!
}

type DelegatorClaimRewardAction @entity {
  id: ID!
  token_id: String!
  amount: BigInt
  receiver: String!
}

type ValidatorClaimRewardAction @entity {
  id: ID!
  token_id: String!
  amount: BigInt
  receiver: String!
}

type ReceiveAnchorRewardAction @entity {
  id: ID!
  consumer_chain_id: String!
  anchor_id: String!
  token_id: String!
  amount: BigInt!
  validator_set: String!
  sequence: BigInt!
  reward_uuid: BigInt!
  user_action: UserAction!
}

type ValidatorReceiveAnchorRewardAction @entity {
  id: ID!
  consumer_chain_id: String!
  anchor_id: String!
  token_id: String!
  amount: BigInt!
  validator_id: String!
  sequence: BigInt!
  reward_uuid: BigInt!
  validator_commission_rate: BigInt!
  user_action: UserAction!
}