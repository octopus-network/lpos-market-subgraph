
type StakingPool @entity {
  id: ID!
  total_share_balance: BigInt!,
  total_staked_balance: BigInt!,
  stakers: [Staker!] @derivedFrom(field: "select_staking_pool")
}

type Staker @entity {
  id: ID!
  staker_id: String!,
  select_staking_pool_id: String,
  select_staking_pool: StakingPool,
  shares: BigInt!,

  bonding_consumer_chain_count: Int!
  bonding_consumer_chains: [StakerAndConsumerChain!] @derivedFrom(field: "staker") ,
  max_bonding_unlock_period: BigInt!,
  unbonding_unlock_time: BigInt!,
}

type Validator @entity {
  id: ID!
  escrow_id: String!
  total_staked_balance: BigInt!
  total_share_balance: BigInt!
  share_balance: BigInt!
  staked_balance: BigInt!
  staker: Staker

  delegator_count:Int!
  delegator_list_string: String!
  delegators: [Delegator!]! @derivedFrom(field: "select_validator")
  
  rewards: [ValidatorReward!] @derivedFrom(field: "validator")
}

type ValidatorReward @entity {
  id: ID!
  validator: Validator!
  reward_token_id: String!
  reward_token_amount: BigInt!
}

type Delegator @entity {
	id: ID!
  select_validator: Validator
  share_balance: BigInt!
  staked_balance: BigInt!
  rewards: [DelegatorReward!] @derivedFrom(field: "delegator")
}

type DelegatorReward @entity {
  id: ID!
  delegator: Delegator
  reward_token_id: String!
  reward_token_amount: BigInt!
}

type ConsumerChain @entity {
  id: ID!
  consumer_chain_id: String!,
  unbond_period: BigInt!,
  website: String!,
  governance: String!,
  treasury: String!,
  status: String!,
  pos_account_id: String!,
  register_fee: BigInt!,
  is_registered_in_lposmarket: Boolean!
  stakers: [StakerAndConsumerChain!] @derivedFrom(field: "consumer_chain")
}

type StakerAndConsumerChain @entity {
  id: ID!
  staker: Staker!
  consumer_chain: ConsumerChain!
  key: String!
}

enum SlashStatus {
  Pending,
  Rejected,
  Approved,
}

type Slash @entity {
  id: ID!
  consumer_chain_id: String!,
  slash_items: String!,
  evidence_sha256_hash: String!
  status: SlashStatus! 
}

type Summary @entity {
  id: ID!
  chain_count: Int!
  validator_count: Int!
}

enum WithdrawalStatus {
  Pending,
  Withdrawn,
}

type Withdrawal @entity {
  id: ID!

  staker: Staker!
  
  withdrawal_certificate: String!
  pool_id: String!
  amount: BigInt!
  unlock_epoch: BigInt!
  unlock_time: BigInt!
  beneficiary: String!

  create_action: UserAction!
  withdraw_action: WithdrawAction

  status: WithdrawalStatus!
  
}

enum ActionType {

  # staking pool
  ping_action,

  # staker
  staker_stake_action,
  staker_increase_stake_action,
  staker_decrease_stake_action,
  staker_unstake_action,

  staker_bond_action,
  staker_unbond_action,
  staker_chang_key_action,

  # validator
  deploy_action,
  stake_action,
  increase_stake_action,
  decrease_stake_action,

  validator_ping_action,

  # cc gov
  register_consumer_chain_action,
  update_consumer_chain_action,
  deregister_consumer_chain_action,
  request_slash_action

  # delegator
  delegate_action,
  increase_delegation_action,
  decrease_deleation_action,
  undelegate_action,

  # validator & delegator
  withdraw_action,
  delegator_receive_reward_action,
  validator_receive_reward_action,

  delegator_claim_reward_action,
  validator_claim_reward_action,

  #registry 
  register_consumer_chain_in_lpos_market_action,
  
}

type UserAction @entity {
  id: ID!

  predecessor_id: String!
	signer_id: String!
	user_id: String!
	timestamp: BigInt!
	timestamp_plus_log_index: BigInt!
	receipt_id: String!

  action_type: ActionType!

   # staking pool
  ping_action: PingAction,
  
  #staker
  staker_stake_action: StakerStakeAction,
  staker_increase_stake_action: StakerIncreaseStakeAction,
  staker_decrease_stake_action: StakerDecreaseStakeAction,
  staker_unstake_action: StakerUnstakeAction,

  staker_bond_action: StakerBondAction,
  staker_unbond_action: StakerUnbondAction,
  staker_change_key_action: StakerChangeKeyAction,

  # cc gov
  register_consumer_chain_action: RegisterConsumerChainAction,
  update_consumer_chain_action: UpdateConsumerChainAction,
  deregister_consumer_chain_action: DeregisterConsumerChainAction,
  request_slash_action: RequestSlashAction,

  # validator
  deploy_action: DeployAction,
  stake_action: StakeAction,
  increase_stake_action: IncreaseStakeAction ,
  decrease_stake_action: DecreaseStakeAction,


  restake_action: RestakeAction,
  unrestake_action: UnrestakeAction,
  change_key_action: ChangeKeyAction,

  validator_ping_action: ValidatorPingAction,

  # delegator
  delegate_action: DelegateAction
  increase_delegation_action: IncreaseDelegationAction,
  decrease_deleation_action: DecreaseDelegationAction,
  undelegate_action: UndelegateAction,

  # validator & delegator
  withdraw_action: WithdrawAction,

  delegator_receive_reward_action: DelegatorReceiveRewardAction,
  validator_receive_reward_action: ValidatorReceiveRewardAction,

  delegator_claim_reward_action: DelegatorClaimRewardAction,
  validator_claim_reward_action: ValidatorClaimRewardAction,

  # registry
  register_consumer_chain_in_lpos_market_action: RegisterConsumerChainInLposMarketAction,
  

}

type PingAction @entity {
  id: ID!
  pool_id: String!
  new_total_staked_balance: BigInt!
}

type StakerStakeAction @entity {
  id: ID!
  select_pool: String!
  stake_amount: BigInt!
	increase_shares: BigInt!,
	sequence: BigInt!
}

type StakerIncreaseStakeAction @entity {
  id: ID!
  increase_stake_amount: BigInt!
	increase_shares: BigInt!,
	sequence: BigInt!
}

type StakerDecreaseStakeAction @entity {
  id: ID!
  decrease_stake_amount: BigInt!,
	decrease_shares: BigInt!,
	withdraw_certificate: BigInt!,
	sequence: BigInt!,
}

type StakerUnstakeAction @entity {
  id: ID!
  decrease_stake_amount: BigInt!,
	decrease_shares: BigInt!,
	withdraw_certificate: BigInt!,
	sequence: BigInt!
}

type StakerBondAction @entity {
  id: ID!
  staker_id: String!
  consumer_chain_id: String!
  key: String!
}

type StakerUnbondAction @entity {
  id: ID!
  staker_id: String!
  consumer_chain_id: String!
}

type StakerChangeKeyAction @entity {
  id: ID!
  staker_id: String!
  consumer_chain_id: String!
  old_key: String!
  new_key: String!
}

type ValidatorPingAction @entity {
  id: ID!
  validator_id: String!,
  new_total_staked_balance: BigInt!
}

type RegisterConsumerChainAction @entity {
  id: ID!
  consumer_chain_register_param: String!
}


type RegisterConsumerChainInLposMarketAction @entity {
  id: ID!
  consumer_chain_id: String!
  anchor_id: String!
}

type UpdateConsumerChainAction @entity {
  id: ID!
  consumer_chain_update_param: String!
}

type DeregisterConsumerChainAction @entity {
  id: ID!

}

type RequestSlashAction @entity {
  id: ID!
  slash: Slash!
  consumer_chain_id: String!
  slash_items: String!
  evidence_sha256_hash: String!
}

type DeployAction @entity {
  id: ID!
  escrow_id: String!
  deploy_fee: BigInt!
}

type StakeAction @entity {
  id: ID!
  select_pool_id: String!
  stake_amount: BigInt!
  increase_shares: BigInt!
}

type IncreaseStakeAction @entity {
  id: ID!
  increase_stake_amount: BigInt! 
  increase_shares: BigInt!
}

type DecreaseStakeAction @entity {
  id: ID!
  decrease_stake_amount: BigInt!
  decrease_shares: BigInt!

}

type RestakeAction @entity {
  id: ID!
  consumer_chain_id: String!
  key: String!
}

type UnrestakeAction @entity {
  id: ID!
  consumer_chain_id: String!
}

type ChangeKeyAction @entity {
  id: ID!
  consumer_chain_id: String!
  key: String!
}

type DelegateAction @entity {
  id: ID!
  validator_id: String!
  delegate_amount: BigInt!
  increase_shares: BigInt!
}

type IncreaseDelegationAction @entity {
  id: ID!
  increase_delegation_amount: BigInt!
  increase_shares: BigInt!
}

type DecreaseDelegationAction @entity {
  id: ID!
  decrease_delegation_amount: BigInt!
  decrease_shares: BigInt!
  sequence: BigInt!
  staker_decrease_stake_action: StakerDecreaseStakeAction!
}

type UndelegateAction @entity {
  id: ID!
  decrease_delegation_amount: BigInt!
  decrease_shares: BigInt!
  sequence: BigInt!
  staker_decrease_stake_action: StakerDecreaseStakeAction!
}

type WithdrawAction @entity{
  id: ID!
  withdraw_certificate_id: String!
  amount: BigInt!
  withdrawal: Withdrawal!
}

type DelegatorReceiveRewardAction @entity {
  id: ID!
  reward_token_id: String!
  reward_token_amount: BigInt!
  receiver: String!
}

type ValidatorReceiveRewardAction @entity {
  id: ID!
  reward_token_id: String!
  reward_token_amount: BigInt!
  receiver: String!
}

type DelegatorClaimRewardAction @entity {
  id: ID!
  reward_token_id: String!
  reward_token_amount: BigInt
  receiver: String!
}

type ValidatorClaimRewardAction @entity {
  id: ID!
  reward_token_id: String!
  reward_token_amount: BigInt
  receiver: String!
}